# configuração da porta
server.port=${PORT}

# datasource
spring.datasource.driverClassName=org.h2.Driver
# usando variáveis de ambiente que serão configuradas no servidor de produção.
# para configurar a variável de ambiente, no servidor, fazer conforme segue:
# export  ARTEVIVA_DATABASE_URL=jdbc:h2:mem:arte-viva-prod
# export  ARTEVIVA_DATABASE_USERNAME=sa
# export  ARTEVIVA_DATABASE_PASSWORD=123

# outra forma de executar a aplicação utilizando as variáveis de ambiente é conforme segue:
# java -jar -Dspring.profiles.active=prod -DPORT=8090 -DARTEVIVA_DATABASE_URL=jdbc:h2:mem:arte-viva-prod -DARTEVIVA_DATABASE_USERNAME=sa -DARTEVIVA_DATABASE_PASSWORD=123 arteviva.jar
spring.datasource.url=${ARTEVIVA_DATABASE_URL}
spring.datasource.username=${ARTEVIVA_DATABASE_USERNAME}
spring.datasource.password=${ARTEVIVA_DATABASE_PASSWORD}

# jpa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# h2
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# comandos para executar o docker
# criar a imagem:
# docker build -t mzfinfo1966/arteviva:1.0.0
# criar um container para executar a aplicação na cloud.
# produção
# docker run -d --name arteviva-api -p 8091:8091 -e ARTEVIVA_DATABASE_URL='jdbc:h2:mem:arte-viva-prod' -e PORT='8091' -e SPRING_PROFILES_ACTIVE='prod' -e ARTEVIVA_DATABASE_USERNAME='sa' -e ARTEVIVA_DATABASE_PASSWORD=123 mzfinfo/arteviva:1.0.0
 
# desenvolvimento
# docker run -d --name arteviva-api-des -p 8082:8082 -e ARTEVIVA_DATABASE_URL='jdbc:h2:mem:arte-viva-des' -e PORT='8082' -e SPRING_PROFILES_ACTIVE='dev' -e ARTEVIVA_DATABASE_USERNAME='sa' -e ARTEVIVA_DATABASE_PASSWORD='' mzfinfo/arteviva:1.0.0


